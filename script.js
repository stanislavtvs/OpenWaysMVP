    /* ======================================================
       1) –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ü–∞–≤–ª–æ–¥–∞—Ä)
       ====================================================== */
    const PLACES = [
      {
        id: 'mosque',
        name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –º–µ—á–µ—Ç—å –ü–∞–≤–ª–æ–¥–∞—Ä–∞',
        address: '—É–ª. –ê–∫–∞–¥–µ–º–∏–∫–∞ –ú–∞—Ä–≥—É–ª–∞–Ω–∞, 149',
        coords: [52.29903, 76.93885],
        features: { ramp: true, elevator: false, wc: false, tactile: false },
        access: 'partial',
        desc: '–ü–∞–Ω–¥—É—Å —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞. –õ–∏—Ñ—Ç–∞ –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –Ω–µ—Ç.'
      },
      {
        id: 'batyrmall',
        name: '–¢–†–¶ ¬´Batyr Mall¬ª',
        address: '–ø—Ä. –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞, 1/1',
        coords: [52.28963, 76.95417],
        features: { ramp: true, elevator: true, wc: true, tactile: true },
        access: 'full',
        desc: '–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω: –ø–∞–Ω–¥—É—Å, –ª–∏—Ñ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—É–∞–ª–µ—Ç, —Ç–∞–∫—Ç–∏–ª—å–Ω–∞—è –ø–ª–∏—Ç–∫–∞.'
      },
      {
        id: 'clinic2',
        name: '–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ ‚Ññ2',
        address: '—É–ª. –ê–∫–∞–¥–µ–º–∏–∫–∞ –°–∞—Ç–ø–∞–µ–≤–∞, 36',
        coords: [52.28363, 76.95860],
        features: { ramp: true, elevator: false, wc: true, tactile: false },
        access: 'partial',
        desc: '–ü–∞–Ω–¥—É—Å —É –≤—Ö–æ–¥–∞, –ª–∏—Ñ—Ç–∞ –Ω–µ—Ç; –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—É–∞–ª–µ—Ç.'
      },
      {
        id: 'school25',
        name: '–®–∫–æ–ª–∞-–ª–∏—Ü–µ–π ‚Ññ25',
        address: '—É–ª. –õ–æ–º–æ–≤–∞, 90',
        coords: [52.27541, 76.98070],
        features: { ramp: false, elevator: false, wc: false, tactile: false },
        access: 'none',
        desc: '–ù–µ—Ç –ø–∞–Ω–¥—É—Å–∞ –∏ –ª–∏—Ñ—Ç–∞, —Ç—É–∞–ª–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
      }
    ];

    /* ======================================================
       2) –ö–∞—Ä—Ç–∞ –∏ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏
       ====================================================== */
    const map = L.map('map', { zoomControl:true, attributionControl:true })
                 .setView([52.29, 76.96], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19, attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    const markersLayer = L.layerGroup().addTo(map);
    const routesLayer  = L.layerGroup().addTo(map);

    function setDebug(msg){ document.getElementById('debug').textContent = msg; }

    /* ======================================================
       3) –ú–∞—Ä–∫–µ—Ä—ã-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (divIcon + —ç–º–æ–¥–∑–∏)
       ====================================================== */
    function colorByAccessHex(a){
      if(a==='full')    return '#22c55e';
      if(a==='partial') return '#eab308';
      return '#ef4444';
    }

    function featureEmojis(place){
      const arr=[];
      if(place.features.ramp) arr.push('‚ôø');
      if(place.features.elevator) arr.push('üõó');
      if(place.features.wc) arr.push('üöª');
      if(place.features.tactile) arr.push('üö∂');
      return arr.slice(0,3); // –º–∞–∫—Å–∏–º—É–º —Ç—Ä–∏
    }

    function makeDivIcon(place){
      const emojis = featureEmojis(place).map(e=>`<span>${e}</span>`).join('');
      const bg = colorByAccessHex(place.access);
      return L.divIcon({
        className:'',
        html:`<div class="ow-marker" style="background:${bg};"><div class="stack">${emojis||'‚Ä¢'}</div></div>`,
        iconSize:[36,36], iconAnchor:[18,18], popupAnchor:[0,-18]
      });
    }

    /* ======================================================
       4) –§–∏–ª—å—Ç—Ä—ã (–ª–æ–≥–∏–∫–∞ –ò–õ–ò)
       ====================================================== */
    const filters = { ramp:true, elevator:true, wc:true, tactile:true };

    function passFilters(p){
      const active = Object.keys(filters).filter(k=>filters[k]);
      if(active.length===0) return true;
      return active.some(k=>p.features[k]);
    }

    function renderMarkers(){
      markersLayer.clearLayers();
      let visible = 0;
      PLACES.forEach(p=>{
        if(!passFilters(p)) return;
        const m = L.marker(p.coords, { icon: makeDivIcon(p), title:p.name }).addTo(markersLayer);
        m.on('click', ()=>openPlaceSheet(p));
        visible++;
      });
      setDebug(`markers rendered: ${visible}`);
      document.getElementById('s-total').textContent = PLACES.length;
      document.getElementById('s-visible').textContent = visible;
    }

    function fitToVisible(){
      const coords = PLACES.filter(passFilters).map(p=>p.coords);
      if(coords.length){
        map.fitBounds(L.latLngBounds(coords), { padding:[40,40] });
      }
    }

    /* ======================================================
       5) –ù–∏–∂–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ (place/route)
       ====================================================== */
    const sheet = document.getElementById('sheet');
    const title = document.getElementById('place-title');
    const addr  = document.getElementById('place-address');
    const desc  = document.getElementById('place-desc');
    const tags  = document.getElementById('place-tags');

    function tag(icon, label, color='#22c55e'){
      return `<div class="tag"><div class="icon-badge" style="background:${color}">${icon}</div>${label}</div>`;
    }

    function openPlaceSheet(p){
      title.textContent = p.name;
      addr.textContent  = p.address || '‚Äî';
      desc.textContent  = p.desc || '';
      tags.innerHTML = '';
      if(p.features.ramp)     tags.innerHTML += tag('‚ôø', '–ü–∞–Ω–¥—É—Å', '#22c55e');
      if(p.features.elevator) tags.innerHTML += tag('üõó', '–õ–∏—Ñ—Ç', '#22c55e');
      if(p.features.wc)       tags.innerHTML += tag('üöª', '–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç—É–∞–ª–µ—Ç', '#22c55e');
      if(p.features.tactile)  tags.innerHTML += tag('üö∂', '–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –ø–ª–∏—Ç–∫–∞', '#22c55e');
      const st = p.access==='full'?'–î–æ—Å—Ç—É–ø–Ω–æ':p.access==='partial'?'–ß–∞—Å—Ç–∏—á–Ω–æ':'–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
      tags.innerHTML += tag('‚óè', st, colorByAccessHex(p.access));
      sheet.classList.add('open');
    }

    function openRouteSheet(r, labelColor='#22c55e', labelText='–ú–∞—Ä—à—Ä—É—Ç'){
      title.textContent = `–ú–∞—Ä—à—Ä—É—Ç: ${r.name}`;
      addr.textContent  = '';
      desc.textContent  = r.desc || '';
      tags.innerHTML    = tag('‚Äî', labelText, labelColor);
      sheet.classList.add('open');
    }

    document.getElementById('btn-hide-sheet').addEventListener('click', ()=>sheet.classList.remove('open'));
    map.on('click', ()=>sheet.classList.remove('open'));

    /* ======================================================
       6) –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ –¥–æ—Ä–æ–≥–∞–º (OSRM, walking)
       ====================================================== */
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—ã —Ç–æ—á–µ–∫)
    const ROUTES_DEF = [
      { name:'–ú–µ—á–µ—Ç—å ‚Üí Batyr Mall', from:'mosque',   to:'batyrmall', color:'#22c55e', desc:'–í —Ü–µ–ª–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç.' },
      { name:'Batyr Mall ‚Üí –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ ‚Ññ2', from:'batyrmall', to:'clinic2', color:'#eab308', desc:'–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —É—á–∞—Å—Ç–∫–∏ —Å–æ —Å—Ä–µ–¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é.' },
      { name:'–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ ‚Ññ2 ‚Üí –®–∫–æ–ª–∞-–ª–∏—Ü–µ–π ‚Ññ25', from:'clinic2', to:'school25', color:'#ef4444', desc:'–ö –º–µ—Å—Ç–∞–º–∏ –ø—É—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–π.' }
    ];
    const id2place = Object.fromEntries(PLACES.map(p=>[p.id, p]));

    // –°—á—ë—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    let totalSegs = 0;
    let greenSegs = 0;

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –≤—ã—Ç—è–Ω—É—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ OSRM
    async function fetchOsrmRoute(a, b, profile='walking'){
      const src = `${a[1]},${a[0]}`;      // lon,lat
      const dst = `${b[1]},${b[0]}`;      // lon,lat
      const url = `https://router.project-osrm.org/route/v1/${profile}/${src};${dst}?overview=full&geometries=geojson`;
      const r = await fetch(url);
      if(!r.ok) throw new Error('OSRM HTTP ' + r.status);
      const data = await r.json();
      if(!data.routes || !data.routes[0]) throw new Error('OSRM: route not found');
      const coords = data.routes[0].geometry.coordinates.map(([lon,lat]) => [lat,lon]);
      return coords;
    }

    // –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã: 80% –∑–µ–ª—ë–Ω—ã–π, 15% –∂—ë–ª—Ç—ã–π, 5% –∫—Ä–∞—Å–Ω—ã–π
    function splitToColoredSegments(coords){
      const len = coords.length;
      if(len < 3){
        // —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–µ–ª—ë–Ω–∞—è –ª–∏–Ω–∏—è
        return [{ color:'#22c55e', coords }];
      }
      const gEnd = Math.max(2, Math.floor(len * 0.80));
      const yEnd = Math.max(gEnd+1, Math.floor(len * 0.95));
      const green  = coords.slice(0, gEnd);
      const yellow = coords.slice(gEnd-1, yEnd);  // -1 —á—Ç–æ–±—ã —Å—Ç—ã–∫ –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª —Ä–∞–∑—Ä—ã–≤
      const red    = coords.slice(yEnd-1);

      const parts = [];
      if(green.length  > 1) parts.push({ color:'#22c55e', coords: green  });
      if(yellow.length > 1) parts.push({ color:'#eab308', coords: yellow });
      if(red.length    > 1) parts.push({ color:'#ef4444', coords: red    });
      return parts;
    }

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    async function buildSegmentedRoute(fromCoords, toCoords){
      try{
        const coords = await fetchOsrmRoute(fromCoords, toCoords, 'walking');
        return splitToColoredSegments(coords);
      }catch(err){
        console.warn('OSRM failed, fallback straight line', err);
        // –µ—Å–ª–∏ OSRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è (–æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞)
        return [{ color:'#22c55e', coords:[fromCoords, toCoords], fallback:true }];
      }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    async function drawRoutes(){
      // –æ–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏
      totalSegs = 0;
      greenSegs = 0;

      routesLayer.clearLayers();

      for(const def of ROUTES_DEF){
        const A = id2place[def.from].coords;
        const B = id2place[def.to].coords;

        const segments = await buildSegmentedRoute(A, B);

        segments.forEach((seg, idx)=>{
          const line = L.polyline(seg.coords, {
            color: seg.color,
            weight: 6,
            opacity: 0.85
          }).addTo(routesLayer);

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          totalSegs++;
          if(seg.color === '#22c55e') greenSegs++;

          // Tooltip –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
          const label =
            seg.color === '#22c55e' ? '–î–æ—Å—Ç—É–ø–Ω—ã–π —É—á–∞—Å—Ç–æ–∫' :
            seg.color === '#eab308' ? '–ß–∞—Å—Ç–∏—á–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å' :
            '–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —É—á–∞—Å—Ç–æ–∫';
          line.bindTooltip(label, { sticky:true });

          // –ö–ª–∏–∫ –ø–æ –æ—Ç—Ä–µ–∑–∫—É ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
          line.on('click', ()=>{
            const nice =
              seg.color === '#22c55e' ? {txt:'–î–æ—Å—Ç—É–ø–µ–Ω', color:'#22c55e'} :
              seg.color === '#eab308' ? {txt:'–°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', color:'#eab308'} :
                                        {txt:'–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω', color:'#ef4444'};
            openRouteSheet(def, nice.color, nice.txt);
          });
        });
      }

      // –û–±–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      document.getElementById('s-segs').textContent = totalSegs;
      const greenShare = totalSegs ? Math.round((greenSegs/totalSegs)*100) : 0;
      document.getElementById('s-green').textContent = greenShare + '%';
    }

    /* ======================================================
       7) UI-–∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è
       ====================================================== */
    // –§–∏–ª—å—Ç—Ä—ã
    document.getElementById('flt-ramp').addEventListener('change', e=>{ filters.ramp=e.target.checked; renderMarkers(); });
    document.getElementById('flt-elevator').addEventListener('change', e=>{ filters.elevator=e.target.checked; renderMarkers(); });
    document.getElementById('flt-wc').addEventListener('change', e=>{ filters.wc=e.target.checked; renderMarkers(); });
    document.getElementById('flt-tactile').addEventListener('change', e=>{ filters.tactile=e.target.checked; renderMarkers(); });

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë (fit)
    document.getElementById('btn-fit').addEventListener('click', fitToVisible);

    // –°–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
    document.getElementById('btn-hide-sheet').addEventListener('click', ()=>sheet.classList.remove('open'));

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤
    let routesVisible = false;
    const toggleBtn = document.getElementById('btn-toggle-routes');
    toggleBtn.addEventListener('click', async ()=>{
      if(!routesVisible){
        // –ø–æ–∫–∞–∑–∞—Ç—å
        await drawRoutes();
        routesVisible = true;
        toggleBtn.textContent = '–°–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã';
      }else{
        // —Å–∫—Ä—ã—Ç—å
        routesLayer.clearLayers();
        routesVisible = false;
        toggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã';
        // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω—É–ª–∏–º –≤–∏–∑—É–∞–ª—å–Ω–æ
        document.getElementById('s-segs').textContent = '0';
        document.getElementById('s-green').textContent = '‚Äî';
      }
    });

    // –ú–æ–¥–∞–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    const modal = document.getElementById('modal');
    const inName = document.getElementById('in-name');
    const inAddress = document.getElementById('in-address');
    const inLat = document.getElementById('in-lat');
    const inLng = document.getElementById('in-lng');
    const inRamp = document.getElementById('in-ramp');
    const inElev = document.getElementById('in-elevator');
    const inWc = document.getElementById('in-wc');
    const inTact = document.getElementById('in-tactile');
    const inDesc = document.getElementById('in-desc');

    document.getElementById('btn-add').addEventListener('click', ()=>{
      inName.value=''; inAddress.value=''; inLat.value=''; inLng.value='';
      inRamp.checked = inElev.checked = inWc.checked = inTact.checked = false;
      inDesc.value='';
      modal.classList.add('open');
    });
    document.getElementById('btn-cancel').addEventListener('click', ()=>modal.classList.remove('open'));

    // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ ‚Äî –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–æ–¥–∞–ª–∫–µ
    map.on('click', (e)=>{
      if(modal.classList.contains('open')){
        inLat.value = e.latlng.lat.toFixed(6);
        inLng.value = e.latlng.lng.toFixed(6);
      }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
    document.getElementById('btn-save').addEventListener('click', ()=>{
      const name = (inName.value||'').trim();
      if(!name){ alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'); return; }
      const lat = parseFloat(inLat.value), lng = parseFloat(inLng.value);
      if(!isFinite(lat) || !isFinite(lng)){ alert('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'); return; }

      const place = {
        id: 'user_'+Date.now(),
        name, address:(inAddress.value||'').trim(),
        coords:[lat,lng],
        features:{
          ramp:!!inRamp.checked, elevator:!!inElev.checked, wc:!!inWc.checked, tactile:!!inTact.checked
        },
        // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–≤–æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        access: (inRamp.checked||inElev.checked||inWc.checked||inTact.checked)
                  ? (inElev.checked&&inRamp.checked&&inWc.checked ? 'full' : 'partial')
                  : 'none',
        desc:(inDesc.value||'').trim()
      };

      PLACES.push(place);
      renderMarkers();
      modal.classList.remove('open');
      openPlaceSheet(place);
    });

    /* ======================================================
       8) –°—Ç–∞—Ä—Ç
       ====================================================== */
    renderMarkers();
    fitToVisible();
    setDebug('ready');

    // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∏—Å–æ–≤–∞–ª–∏—Å—å —Å—Ä–∞–∑—É ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
    // (async ()=>{ await drawRoutes(); routesVisible = true; toggleBtn.textContent='–°–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã'; })();
